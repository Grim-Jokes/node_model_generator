var _base = Array.prototype;

//base classe for the context collection
var ctx = DbCollection.prototype;

function DbCollection(table_name) {
	//This collection will focus on creating and caching queryable objects before hitting the database
	
	this.table_name = table_name || '';
	this.select_clause = [];
	this.where_clause = [];
}

ctx.query = function () {
	var query = 'SELECT ';
	
	var add_clause = function (collection, def) {
		if (collection.length == 0 && def) {		
			query += def + ' ';
		}
		else {
			for (var i = 0; i < collection.length; i++) {
				
				for (var j = 0; j < collection[i].length; j++) {
					query += collection[i][j]

					if (j != collection[i].length - 1) {
						query += ' AND ';
					}
				}
				
				if ( i != collection.length - 1){
					query += ' OR ';
				}
				
			}
		}
	}
	
	add_clause(this.select_clause, '*');
	
	query += 'FROM ' + this.table_name;
	
	if (this.where_clause.length > 0) {
		query += ' WHERE ';
	}

	add_clause(this.where_clause);

	return query;
}

ctx.add = function (model) {
}

ctx.bulk_add = function (models) { 
}

ctx.where = function (expression, values) {
	///Based on the lambda expression, returns a new instance of the collection
	///that will contain the where clause objects 
	///To get the entries from the database, call .to_list() or .to_dict();
	
	expression = expression.toString();
	expression = expression.replace(/"/g, "'").replace(/==/g, '=').replace(/\s/g, '');
	
	var pattern = /[\w\d_]+\s*[=!<>]{1,2}\s*[\w\d'"]+\s*/gi
	var res = expression.match(pattern);
	var operators = expression.match(/\|\||&&/g);

	var where_clause = [];
	var clause_list = [];
	
	for (var i = 1, j = i - 1, k = 0; i < res.length; i++, j++) {
		var clause = res[i];
		
		var patt = /[=<>]|!=/
		var vals = clause.split(patt);
		var op = clause.match(patt);
		
		if (values) {
			var act_val = values[vals[1]]
			clause = vals[0] + op + "'" +act_val +"'"; 
		}

		if (operators && operators[j]) {
			
			if (operators[j] == '||') {
				k++;
				clause_list.push(clause);
				where_clause.push(clause_list);
				clause_list = []
				where_clause.push(clause_list);
			}
			else {
				clause_list.push(clause);
			}
		}
		else {
			clause_list.push(clause);
		}
	}
	
	var new_collection = new DbCollection(this.table_name);
	new_collection.where_clause = where_clause;

	return new_collection;
}

ctx.where.prototype.set = undefined;

ctx.select = function() {
}

ctx.delete = function () {
}

ctx.first = function () {
}

ctx.to_list = function () {
}

module.exports = DbCollection;